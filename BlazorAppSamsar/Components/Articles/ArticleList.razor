@page "/articles/"
@using BlazorAppSamsar.Models
@using BlazorAppSamsar.Data
@using System.Text.RegularExpressions
@using System.Net
@using Microsoft.EntityFrameworkCore
@inject DataContext dataContext
@inject NavigationManager nav
@rendermode InteractiveServer



<h3 class="mt-5 mr-5"> لیست مقالات من</h3>

@if (articles == null)
{
    <p>در حال بارگذاری...</p>
}
else if (!articles.Any())
{
    <div style="margin-top:150px">
        <img src="/images/nonList.png" style="width:600px;height:300px;border-radius:5%;display:block;margin:auto" />
        <p class="text-center mt-3">هیچ مقاله‌ای یافت نشد !</p>
        <div class="text-center">
            <button @onclick='() => nav.NavigateTo("/articles/add", true)' class=" btn btn-sm btn-outline-primary"> افزودن مقاله جدید  </button>
           </div>
    </div>
    
}
else
{
    <div class="container">
        @foreach (var article in articles)
        {
            <div class="d-flex align-items-center justify-content-between mb-3 p-2 border rounded shadow-sm">

                <!-- بخش سمت راست: تصویر + متن -->
                <div class="d-flex align-items-center">
                    <img src="images/Articles/@article.Image"
                         class="rounded-circle me-3"
                         style="width:50px;height:50px;object-fit:cover;" />

                    <div>
                        <h6 class="fw-bold mb-1">@article.Title</h6>
                        <p class="mb-0 text-muted">@GetPreview(article.Content, 32)</p>
                    </div>
                </div>

                <!-- بخش سمت چپ: دکمه‌ها -->
                <div class="d-flex gap-2">
                    <!-- دکمه تغییر انتشار -->
                    <button class="btn btn-sm @(article.IsPublish ? "btn-secondary" : "btn-success")"
                            @onclick="async () => await TogglePublish(article)">
                        @(article.IsPublish ? "لغو انتشار" : "منتشر شود")
                    </button>

                    <!-- دکمه ویرایش -->
                    <button class="btn btn-sm btn-warning"
                            @onclick="() => EditArticle(article.Id)">
                        ویرایش
                    </button>

                    <!-- دکمه حذف -->
                    <button class="btn btn-sm btn-danger"
                            @onclick="async () => await DeleteArticle(article.Id)">
                        حذف
                    </button>
                </div>
            </div>
        }
    </div>
}


@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider authenticationStateProvider
@code {
    private List<Article> articles;

    protected override async Task OnInitializedAsync()
    {
        await LoadArticles();
    }

    private async Task LoadArticles()
    {

        var user=await authenticationStateProvider.GetAuthenticationStateAsync();

        articles = await dataContext.Articles.Where(a => a.AppUserUsername == user.User.Identity.Name)
            .OrderByDescending(a => a.Cdate)
            .ToListAsync();


    }

    private static string GetPreview(string html, int max = 32)
    {
        if (string.IsNullOrWhiteSpace(html))
            return string.Empty;

        var noTags = Regex.Replace(html, "<.*?>", string.Empty, RegexOptions.Singleline);
        noTags = WebUtility.HtmlDecode(noTags)?.Trim() ?? string.Empty;

        return noTags.Length <= max ? noTags : noTags.Substring(0, max) + "…";
    }

    private async Task TogglePublish(Article article)
    {
        article.IsPublish = !article.IsPublish;
        dataContext.Articles.Update(article);
        await dataContext.SaveChangesAsync();
        await LoadArticles();
    }

    private void EditArticle(int id)
    {
        nav.NavigateTo($"/articles/edit/{id}", true);
    }

    private async Task DeleteArticle(int id)
    {
        var article = await dataContext.Articles.FindAsync(id);
        if (article != null)
        {
            dataContext.Articles.Remove(article);
            await dataContext.SaveChangesAsync();
            await LoadArticles();
        }
    }
}
