@page "/articles/add"
@using BlazorAppSamsar.Data
@using BlazorAppSamsar.Models
@using BlazorAppSamsar.Services
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@rendermode InteractiveServer
@attribute [Authorize]
<EditForm Model="ArticalVM" Enhance FormName="f1" OnValidSubmit="Save">
<div class="row mt-3">
    
        <div class="col-md-3">
            <img style="width:100%;height:200px;background:#ccc;margin:10px"/>
            <InputFile class="form-control"/>
        </div>
        <div class="col-md-9 ">

            <DataAnnotationsValidator />
            <div class="mt-3">
                <label class="form-label">عنوان</label>
                <InputText @bind-Value="ArticalVM.Title" class="form-control" />
                <ValidationMessage For="() => ArticalVM.Title" />
            </div>
            <div class="mt-3">
                <label class="form-label">مقاله</label>
                <CKEditorBlazor DisplayName="ck1" @bind-Value="ArticalVM.Content"></CKEditorBlazor>
                <ValidationMessage For="() => ArticalVM.Content" />
            </div>
            <div class="mt-3">
                <label class="form-label">وضعیت انتشار</label>
                <InputSelect @bind-Value="ArticalVM.IsPublish" class="form-control">
                    <option value="true" selected>منتشر شود</option>
                    <option value="false">عدم انتشار</option>
                </InputSelect>
            </div>
            <div class="mt-3">
                <button class="btn btn-success" type="submit">ذخیره مقاله ...</button>
            </div>

            @if (mes != "")
            {
                <div class="mt-3 alert alert-info">
                    <strong>@mes</strong>
                </div>
            }

        </div>
    
</div>
</EditForm>

@inject DataContext dataContext
@inject AuthenticationStateProvider stateProvider
@code {
    public class ArticalViewModel
    {
        [Required(ErrorMessage = "متنی را وارد کنید")]
        [MaxLength(3000, ErrorMessage = "متن طولانی می باشد")]
        [MinLength(50, ErrorMessage = "متن کوتاه می باشد")]
        public string Content { get; set; }
        [Required(ErrorMessage = "عنوان را وارد کنید")]
        [MaxLength(256, ErrorMessage = "عنوان طولانی می باشد")]
        [MinLength(10, ErrorMessage = "عنوان کوتاه می باشد")]
        public string Title { get; set; }

        public bool IsPublish { get; set; } = false;
    }
    [SupplyParameterFromForm] public ArticalViewModel ArticalVM { get; set; } = new ArticalViewModel();
    string mes = "";

    private async Task Save()
    {
        try
        {
            var authState = await stateProvider.GetAuthenticationStateAsync();
            if (authState == null || authState.User.Identity.IsAuthenticated == false)
            {
                mes = "از حساب کاربری خارج شده اید.مجددا به سیستم وارد شوید";
                return;
            }
            Article article = new Article();
            //map
            article.Title = ArticalVM.Title;
            article.Content = ArticalVM.Content;
            article.Cdate = DateTime.Now;
            article.AppUserUsername = authState.User.Identity.Name;
            article.AuthorName = authState.User.Claims.FirstOrDefault(a => a.Type == ClaimTypes.Surname)!.Value;
            article.Views = 0;
            article.IsPublish = ArticalVM.IsPublish;
            article.Image = string.Empty;

            await dataContext.Articles.AddAsync(article);
            await dataContext.SaveChangesAsync();
            mes = "مقاله ذخیره شد";
            ArticalVM = new ArticalViewModel();
        }
        catch (Exception ex)
        {
            mes = "خطا : قادر به ذخیره نشدیم";

        }



    }
}



