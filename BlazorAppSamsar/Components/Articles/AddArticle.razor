@page "/articles/add"
@using BlazorAppSamsar.Data
@using BlazorAppSamsar.Models
@using BlazorAppSamsar.Services
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Forms
@using static MudBlazor.CategoryTypes
@rendermode InteractiveServer
@attribute [Authorize]
<EditForm Model="ArticalVM" Enhance FormName="f1" OnValidSubmit="Save">
<div class="row mt-3">
    
        <div class="col-md-3">
            @if (imagePreview != null)
            {
                <img src="@imagePreview" alt="پیش‌نمایش تصویر" style="max-width:300px; margin-bottom: 10px;" />
            }

            <InputFile OnChange="HandleSelected" accept="image/*" />
            <br />
            <button class="btn btn-primary mt-2" @onclick="UploadImage" disabled="@(!isImageSelected)">آپلود تصویر</button>

        </div>
        <div class="col-md-9 ">

            <DataAnnotationsValidator />
            <div class="mt-3">
                <label class="form-label">عنوان</label>
                <InputText @bind-Value="ArticalVM.Title" class="form-control" />
                <ValidationMessage For="() => ArticalVM.Title" />
            </div>
            <div class="mt-3">
                <label class="form-label">مقاله</label>
                <CKEditorBlazor DisplayName="ck1" @bind-Value="ArticalVM.Content"></CKEditorBlazor>
                <ValidationMessage For="() => ArticalVM.Content" />
            </div>
            <div class="mt-3">
                <label class="form-label">وضعیت انتشار</label>
                <InputSelect @bind-Value="ArticalVM.IsPublish" class="form-control">
                    <option value="true" selected>منتشر شود</option>
                    <option value="false">عدم انتشار</option>
                </InputSelect>
            </div>
            <div class="mt-3">
                <button class="btn btn-success" type="submit">ذخیره مقاله ...</button>
            </div>

            @if (mes != "")
            {
                <div class="mt-3 alert alert-info">
                    <strong>@mes</strong>
                </div>
            }

        </div>
    
</div>
</EditForm>

@inject UploadedImagesService UploadedImagesService
@inject DataContext dataContext
@inject AuthenticationStateProvider stateProvider
@inject IJSRuntime js
@code {
    string Image = "";
    List<IBrowserFile> files;
    private IBrowserFile selectedFile;
    private string imagePreview;
    private bool isImageSelected = false;
    private bool uploadSuccess = false;

    private async Task HandleSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        isImageSelected = true;

        // پیش‌نمایش تصویر
        var buffer = new byte[selectedFile.Size];
        await selectedFile.OpenReadStream().ReadAsync(buffer);
        var base64 = Convert.ToBase64String(buffer);
        imagePreview = $"data:{selectedFile.ContentType};base64,{base64}";
    }

    private async Task UploadImage()
    {
        if (selectedFile != null)
        {
            var uploadsFolder = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "uploads");

            if (!Directory.Exists(uploadsFolder))
                Directory.CreateDirectory(uploadsFolder);

            var uniqueFileName = $"{Guid.NewGuid()}_{selectedFile.Name}";
            var filePath = Path.Combine(uploadsFolder, uniqueFileName);

            using var fileStream = new FileStream(filePath, FileMode.Create);
            await selectedFile.OpenReadStream().CopyToAsync(fileStream);

            // برای نمایش‌های بعدی: ذخیره مسیر فایل
            UploadedImagesService.ImagePaths.Add($"uploads/{uniqueFileName}");


            uploadSuccess = true;
            imagePreview = null;
            isImageSelected = false;
        }
    }
    public class ArticalViewModel
    {
        [Required(ErrorMessage = "متنی را وارد کنید")]
        [MaxLength(3000, ErrorMessage = "متن طولانی می باشد")]
        [MinLength(50, ErrorMessage = "متن کوتاه می باشد")]
        public string Content { get; set; }
        [Required(ErrorMessage = "عنوان را وارد کنید")]
        [MaxLength(256, ErrorMessage = "عنوان طولانی می باشد")]
        [MinLength(10, ErrorMessage = "عنوان کوتاه می باشد")]
        public string Title { get; set; }

        public bool IsPublish { get; set; } = false;
    }
    [SupplyParameterFromForm] public ArticalViewModel ArticalVM { get; set; } = new ArticalViewModel();
    string mes = "";

    private async Task Save()
    {
        try
        {
            var authState = await stateProvider.GetAuthenticationStateAsync();
            if (authState == null || authState.User.Identity.IsAuthenticated == false)
            {
                mes = "از حساب کاربری خارج شده اید.مجددا به سیستم وارد شوید";
                return;
            }
            Article article = new Article();
            //map
            article.Title = ArticalVM.Title;
            article.Content = ArticalVM.Content;
            article.Cdate = DateTime.Now;
            article.AppUserUsername = authState.User.Identity.Name;
            article.AuthorName = authState.User.Claims.FirstOrDefault(a => a.Type == ClaimTypes.Surname)!.Value;
            article.Views = 0;
            article.IsPublish = ArticalVM.IsPublish;
            article.Image = Image;

            await dataContext.Articles.AddAsync(article);
            await dataContext.SaveChangesAsync();
            mes = "مقاله ذخیره شد";
            ArticalVM = new ArticalViewModel();
        }
        catch (Exception ex)
        {
            mes = "خطا : قادر به ذخیره نشدیم";

        }



    }
    async void HandleInputFile(InputFileChangeEventArgs e)
    {
        if (e.FileCount > 4)
        {
            await js.InvokeVoidAsync("toastError", "حداکثر 4 تصویر میتوانید انتخاب نمایید");
            return;
        }
        var selectedFiles = e.GetMultipleFiles(4).ToList();
        if (selectedFiles != null && selectedFiles.Count > 0)
        {
            files = selectedFiles;
        }
    }

    private async Task UploadFile(MouseEventArgs e)
    {
        var upload = new UploadFile();
        if (files == null || files.Count == 0)
        {
            await js.InvokeVoidAsync("toastError", "فایلی انتخاب کنید");
            return;
        }
        var res = await upload.Uploads(files, Statics.PathStatic.ArticleIMG,Services.IMGModes.Modes);

        if (res.IsSuccess)
        {
           Image = res.Filename;
            await js.InvokeVoidAsync("toast", "تصاویر انتخابی آپلود شدند");
        }
        else
        {
            await js.InvokeVoidAsync("toastError", res.Message);
        }
    }
}


}
}