@page "/articles/add"
@page "/articles/edit/{ArticleId:int}"

@using BlazorAppSamsar.Data
@using BlazorAppSamsar.Models
@using BlazorAppSamsar.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@rendermode InteractiveServer
@attribute [Authorize]

<EditForm Model="ArticalVM" OnValidSubmit="Save">
    <div class="row mt-3">
        <div class="col-md-11 mx-auto p-md-2">
            <div class="row">
                <div class="col-md-3">
                    <img src="@imagePreview" alt="پیش‌نمایش تصویر"
                         style="width:100%;height:250px; margin-bottom: 10px; display: block; background: #ccc;" />
                    <InputFile OnChange="HandleSelected" accept="image/*" />
                </div>
                <div class="col-md-9">
                    <DataAnnotationsValidator />
                    <div class="mt-3">
                        <label class="form-label">عنوان</label>
                        <InputText @bind-Value="ArticalVM.Title" class="form-control" />
                        <ValidationMessage For="() => ArticalVM.Title" />
                    </div>
                    <div class="mt-3">
                        <label class="form-label">مقاله</label>
                        <CKEditorBlazor DisplayName="ck1" @bind-Value="ArticalVM.Content"></CKEditorBlazor>
                        <ValidationMessage For="() => ArticalVM.Content" />
                    </div>
                    <div class="mt-3">
                        <label class="form-label">وضعیت انتشار</label>
                        <InputSelect @bind-Value="ArticalVM.IsPublish" class="form-control">
                            <option value="true">منتشر شود</option>
                            <option value="false">عدم انتشار</option>
                        </InputSelect>
                    </div>
                    <div class="mt-3">
                        <button class="btn btn-success" type="submit">
                            @(ArticleId == 0 ? "ذخیره مقاله" : "ویرایش مقاله")
                        </button>
                    </div>

                    @if (!string.IsNullOrWhiteSpace(mes))
                    {
                        <div class="mt-3 alert alert-info">
                            <strong>@mes</strong>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</EditForm>

@inject DataContext dataContext
@inject AuthenticationStateProvider stateProvider

@code {
    [Parameter] public int ArticleId { get; set; }

    private IBrowserFile selectedFile;
    private string imagePreview;
    private string mes = "";

    public class ArticalViewModel
    {
        [Required(ErrorMessage = "متنی را وارد کنید")]
        [MaxLength(3000, ErrorMessage = "متن طولانی می باشد")]
        [MinLength(50, ErrorMessage = "متن کوتاه می باشد")]
        public string Content { get; set; }

        [Required(ErrorMessage = "عنوان را وارد کنید")]
        [MaxLength(256, ErrorMessage = "عنوان طولانی می باشد")]
        [MinLength(10, ErrorMessage = "عنوان کوتاه می باشد")]
        public string Title { get; set; }

        public bool IsPublish { get; set; } = false;
    }

    [SupplyParameterFromForm]
    public ArticalViewModel ArticalVM { get; set; } = new ArticalViewModel();

    protected override async Task OnInitializedAsync()
    {
        if (ArticleId != 0)
        {
            var article = await dataContext.Articles.FindAsync(ArticleId);
            if (article != null)
            {
                ArticalVM = new ArticalViewModel
                {
                    Title = article.Title,
                    Content = article.Content,
                    IsPublish = article.IsPublish
                };
                imagePreview = string.IsNullOrEmpty(article.Image)
                    ? null
                    : $"/images/Articles/{article.Image}";
            }
        }
    }

    private async Task HandleSelected(InputFileChangeEventArgs e)
    {
        if (e.File == null || e.File.Size == 0) return;

        selectedFile = e.File;
        var buffer = new byte[selectedFile.Size];
        await selectedFile.OpenReadStream().ReadAsync(buffer);
        var base64 = Convert.ToBase64String(buffer);
        imagePreview = $"data:{selectedFile.ContentType};base64,{base64}";
    }

    private async Task Save()
    {
        try
        {
            var authState = await stateProvider.GetAuthenticationStateAsync();
            if (authState == null || authState.User.Identity.IsAuthenticated == false)
            {
                mes = "از حساب کاربری خارج شده‌اید. مجدداً وارد شوید.";
                return;
            }

            if (ArticleId == 0)
            {
                // افزودن
                var newArticle = new Article
                {
                    Title = ArticalVM.Title,
                    Content = ArticalVM.Content,
                    Cdate = DateTime.Now,
                    AppUserUsername = authState.User.Identity.Name,
                    AuthorName = authState.User.Claims.FirstOrDefault(a => a.Type == ClaimTypes.Surname)!.Value,
                    Views = 0,
                    IsPublish = ArticalVM.IsPublish,
                    Image = await SaveImage(selectedFile)
                };
                dataContext.Articles.Add(newArticle);
                await dataContext.SaveChangesAsync();
                mes = "مقاله با موفقیت ذخیره شد.";
            }
            else
            {
                // ویرایش
                var article = await dataContext.Articles.FindAsync(ArticleId);
                if (article != null)
                {
                    article.Title = ArticalVM.Title;
                    article.Content = ArticalVM.Content;
                    article.IsPublish = ArticalVM.IsPublish;
                    if (selectedFile != null)
                    {
                        article.Image = await SaveImage(selectedFile);
                    }
                    dataContext.Articles.Update(article);
                    await dataContext.SaveChangesAsync();
                    mes = "ویرایش با موفقیت انجام شد.";
                }
            }
        }
        catch (Exception ex)
        {
            mes = "خطا در ذخیره مقاله: " + ex.InnerException.Message;
        }
    }

    private async Task<string> SaveImage(IBrowserFile file)
    {
        if (file == null) return null;

        var folder = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/images/Articles");
        if (!Directory.Exists(folder)) Directory.CreateDirectory(folder);

        var fileName = $"{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
        var filePath = Path.Combine(folder, fileName);

        await using var fs = new FileStream(filePath, FileMode.Create);
        await file.OpenReadStream().CopyToAsync(fs);

        return fileName;
    }
}
