@page "/auth/login"
@using BlazorAppSamsar.Components.Components
@using BlazorAppSamsar.Data
@using BlazorAppSamsar.Models
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components;




<PageTitle>login</PageTitle>
<section class="bg-light py-3 py-md-5">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-sm-10 col-md-8 col-lg-6 col-xl-5 col-xxl-4">
                <div class="card border border-light-subtle rounded-3 shadow-sm">
                    <div class="card-body p-3 p-md-4 p-xl-5">
                        <div class="text-center mb-3">
                            <a href="#!">
                                <img src="/favicon.png" alt="BootstrapBrain Logo" width="175" height="57">
                            </a>
                        </div>
                        <h2 class="fs-6 fw-normal text-center text-secondary mb-4">ورود به حساب کاربری</h2>
                        <EditForm Model="AppUser" Enhance FormName="f1" OnValidSubmit="LoginClick">
                            <DataAnnotationsValidator />
                            <div class="row gy-2 overflow-hidden">
                                <div class="col-12">
                                    <div class="form-floating mb-3">
                                        <InputText @bind-Value="AppUser.Username" class="form-control" />
                                        <ValidationMessage For="() => AppUser.Username" />
                                        @* <input type="email" class="form-control" name="email" id="email" placeholder="name@example.com" required> *@
                                        <label for="email" class="form-label">نام کاربری</label>
                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="form-floating mb-3">
                                        <InputText type="password" @bind-Value="AppUser.Password" class="form-control" />
                                        <ValidationMessage For="() => AppUser.Password" />
                                        @* <input type="password" class="form-control" name="password" id="password" value="" placeholder="Password" required> *@
                                        <label for="password" class="form-label">رمز عبور</label>
                                    </div>
                                </div>
                                <div class="col-12">
                                    <div class="d-grid my-3">
                                        <button class="btn btn-primary btn-lg" type="submit">ورود </button>
                                    </div>
                                </div>
                                <div class="col-12">
                                    <p class="m-0 text-secondary text-center">حساب کاربری ندارید <a href="/auth/register" class="link-primary text-decoration-none">ثبت نام کنید</a></p>
                                </div>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@inject DataContext dataContext
@inject NavigationManager nav;
@using BCrypt.Net;
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations
@* @using static BlazorAppSamsar.Components.Components.MessageProvider
@CascadingParameter] public MessageState MessageState { get; set; } // Ensure this line is correct *@

@code {
    bool loading = false;
    public class MyUser
    {
        [RegularExpression(@"^[a-zA-Z0-9]+$", ErrorMessage = "نام کاربری معتبر نمی باشد")]
        [MinLength(3)]
        [MaxLength(30)]
        public string Username { get; set; }

        [Required]
        [MinLength(6)]
        [MaxLength(30)]
        public string Password { get; set; }
    }

    [SupplyParameterFromForm]
    public MyUser AppUser { get; set; } = new MyUser();
    string mes = "";
    string type = "";

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;
    //  [CascadingParameter] public MessageState MessageState { get; set; } = new MessageState();
    private async Task LoginClick(EditContext args)
    {
        //  var messageState = (MessageState)CascadingValue;
        // mes = "";
        // type = "";
        // StateHasChanged();
        loading = true;
        //StateHasChanged();
        try
        {

            var user = await dataContext.AppUsers.Where(a => a.Username.ToLower() == AppUser.Username.ToLower()).FirstOrDefaultAsync();
            if (user == null)
            {
                type = "warning";
                mes = "invalid user or password&&&" + new Random().Next();

                return;
            }

            try
            {
                if (BCrypt.Verify(AppUser.Password, user.Password) == false)
                {
                    type = "warning";
                    mes = "invalid user or password&&&" + new Random().Next();
                    return;
                }
            }
            catch (Exception)
            {
                type = "warning";
                mes = "invalid user or password&&&" + new Random().Next();
                return;
            }

            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name  ,user.Username),
                new Claim(ClaimTypes.NameIdentifier  ,user.UserId),
                new Claim(ClaimTypes.Surname  ,user.NickName),

                new Claim(ClaimTypes.Role  ,"admin")

            };
            var claimIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, new ClaimsPrincipal(claimIdentity));
            HttpContext.Response.Redirect("/");

        }
        catch (Exception ex)
        {

            type = "error";
            mes = ex.Message + "&&&" + new Random().Next();
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }

    }
}